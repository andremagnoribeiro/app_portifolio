.main{
  background: #5c5c5c;
}
.main{
  background: #b5c8b9, 219, 221);
}
.main{
  background: #9d98b3;
}
.main{
  background: #aaaaaa;
}


Atuacoes Profissionais - ap

Formacao Academica Titulacao -fat

Formacao Complementar fc

Orientacoes em Andamento -oa

Producao Bibliografica - pb

Premios Titulos -pt

Participacão em Eventos Congressos

Participacão em Banca






Atuações Profissionais - ap

Formação Acadêmica Titulação -fat

Formação Complementar fc

Orientações em Andamento -oa

Produção Bibliográfica - pb

Prêmios Títulos -pt










ATUACOES-PROFISSIONAIS - AP

FORMACAO-ACADEMICA-TITULACAO -FAT

FORMACAO-COMPLEMENTAR FC

ORIENTACOES-EM-ANDAMENTO -OA

PRODUCAO-BIBLIOGRAFICA - PB

PREMIOS-TITULOS -PT





import React, { useState, useEffect } from 'react'
import Box from '@material-ui/core/Box';
import LinearProgress from '@material-ui/core/LinearProgress';

import { makeStyles } from '@material-ui/core/styles';
import Paper from '@material-ui/core/Paper';
import Grid from '@material-ui/core/Grid';
import {
  getUserId
} from "../api/serverAPI";

import { deepOrange, deepPurple } from '@material-ui/core/colors';

import { PortfolioBusca } from '../components/PortfolioBusca'
import Card from '@material-ui/core/Card';
import CardHeader from '@material-ui/core/CardHeader';
import Button from '@material-ui/core/Button';
import Avatar from '@material-ui/core/Avatar';
import { getSizeTable } from "../api/serverAPI";

//
import Backdrop from '@material-ui/core/Backdrop';
import CircularProgress from '@material-ui/core/CircularProgress';





//
export const Portfolio = (props) => {

  const classesbackdrop = useStylesBackdrop();

  const [open, setOpen] = React.useState(false);


  const userName = props.match.params.user

  const [user, setUser] = useState([]);

  const [sizePBArtigoPublicado, setSizePBArtigoPublicado] = useState('');
  const [sizePBCapituloLivroPublicado, setSizePBCapituloLivroPublicado] = useState('');
  const [sizePBLivroPublicadoOrganizado, setSizePBLivroPublicadoOrganizado] = useState('');
  const [sizePBTextoJornalRevista, setSizePBTextoJornalRevista] = useState('');
  const [sizePBTrabalhosEvento, setSizePBTrabalhosEvento] = useState('');
  const [sizeAPConselhoComissaoConsultoria, setSizeAPConselhoComissaoConsultoria] = useState('');
  const [sizeAPDirecaoAdministracao, setSizeAPDirecaoAdministracao] = useState('');
  const [sizeAPPesquisaDesenvolvimento, setSizeAPPesquisaDesenvolvimento] = useState('');
  const [sizeAPVinculo, setSizeAPVinculo] = useState('');
  const [sizeFATDoutorado, setSizeFATDoutorado] = useState('');
  const [sizeFATEspecializacao, setSizeFATEspecializacao] = useState('');
  const [sizeFATGraduacao, setSizeFATGraduacao] = useState('');
  const [sizeFATMestrado, setSizeFATMestrado] = useState('');
  const [sizeOAAperfeicoamentoEspecializacao, setSizeOAAperfeicoamentoEspecializacao] = useState('');
  const [sizeOADoutorado, setSizeOADoutorado] = useState('');
  const [sizeOAGraduacao, setSizeOAGraduacao] = useState('');
  const [sizeOAIniciacaoCientifica, setSizeOAIniciacaoCientifica] = useState('');
  const [sizeOAMestrado, setSizeOAMestrado] = useState('');
  const [sizeOAPosDoutorado, setSizeOAPosDoutorado] = useState('');
  const [sizePartBancaAperfeicoamentoEspecializacao, setSizePartBancaAperfeicoamentoEspecializacao] = useState('');
  const [sizePartBancaDoutorado, setSizePartBancaDoutorado] = useState('');
  const [sizePartBancaExameQualificacao, setSizePartBancaExameQualificacao] = useState('');
  const [sizePartBancaGraduacao, setSizePartBancaGraduacao] = useState('');
  const [sizePartBancaJulgadoraConcursoPublico, setSizePartBancaJulgadoraConcursoPublico] = useState('');
  const [sizePartBancaJulgadoraOutra, setSizePartBancaJulgadoraOutra] = useState('');
  const [sizePartBancaJulgadoraProfessorTitular, setSizePartBancaJulgadoraProfessorTitular] = useState('');
  const [sizePartBancaMestrado, setSizePartBancaMestrado] = useState('');
  const [sizePartCongresso, setSizePartCongresso] = useState('');
  const [sizePartEncontro, setSizePartEncontro] = useState('');
  const [sizePartOficina, setSizePartOficina] = useState('');
  const [sizePartOutras, setSizePartOutras] = useState('');
  const [sizePartSeminario, setSizePartSeminario] = useState('');
  const [sizePartSimposio, setSizePartSimposio] = useState('');
  const [sizePTPremioTitulo, setSizePTPremioTitulo] = useState('');
  const [sizeATProjetoPesquisa, setSizeATProjetoPesquisa] = useState('');
  const [sizeFCCursoCurtaDuracao, setSizeFCCursoCurtaDuracao] = useState('');


  useEffect(()=>{
    setOpen(backdropOpen());
   
    console.log("sizePBArtigoPublicado",sizePBArtigoPublicado)
    console.log("sizePBCapituloLivroPublicado",sizePBCapituloLivroPublicado)
    console.log("sizePBLivroPublicadoOrganizado",sizePBLivroPublicadoOrganizado)
    console.log("sizePBTextoJornalRevista",sizePBTextoJornalRevista)
    console.log("sizePBTrabalhosEvento",sizePBTrabalhosEvento)
    console.log("sizeAPConselhoComissaoConsultoria",sizeAPConselhoComissaoConsultoria)
    console.log("sizeAPDirecaoAdministracao",sizeAPDirecaoAdministracao)
    console.log("sizeAPPesquisaDesenvolvimento",sizeAPPesquisaDesenvolvimento)
    console.log("sizeAPVinculo",sizeAPVinculo)
    console.log("sizeFATDoutorado",sizeFATDoutorado)
    console.log("sizeFATEspecializacao",sizeFATEspecializacao)
    console.log("sizeFATGraduacao",sizeFATGraduacao)
    console.log("sizeFATMestrado",sizeFATMestrado)
    console.log("sizeOAAperfeicoamentoEspecializacao",sizeOAAperfeicoamentoEspecializacao)
    console.log("sizeOADoutorado",sizeOADoutorado)
    console.log("sizeOAGraduacao",sizeOAGraduacao)
    console.log("sizeOAIniciacaoCientifica",sizeOAIniciacaoCientifica)
    console.log("sizeOAMestrado",sizeOAMestrado)
    console.log("sizeOAPosDoutorado",sizeOAPosDoutorado)
    console.log("sizePartBancaAperfeicoamentoEspecializacao",sizePartBancaAperfeicoamentoEspecializacao)
    console.log("sizePartBancaDoutorado",sizePartBancaDoutorado)
    console.log("sizePartBancaExameQualificacao",sizePartBancaExameQualificacao)
    console.log("sizePartBancaGraduacao",sizePartBancaGraduacao)
    console.log("sizePartBancaJulgadoraConcursoPublico",sizePartBancaJulgadoraConcursoPublico)
    console.log("sizePartBancaJulgadoraOutra",sizePartBancaJulgadoraOutra)
    console.log("sizePartBancaJulgadoraProfessorTitular",sizePartBancaJulgadoraProfessorTitular)
    console.log("sizePartBancaMestrado",sizePartBancaMestrado)
    console.log("sizePartCongresso",sizePartCongresso)
    console.log("sizePartEncontro",sizePartEncontro)
    console.log("sizePartOficina",sizePartOficina)
    console.log("sizePartOutras",sizePartOutras)
    console.log("sizePartSeminario",sizePartSeminario)
    console.log("sizePartSimposio",sizePartSimposio)
    console.log("sizePTPremioTitulo",sizePTPremioTitulo)
    console.log("sizeATProjetoPesquisa",sizeATProjetoPesquisa)
    console.log("sizeFCCursoCurtaDuracao",sizeFCCursoCurtaDuracao)
  
  }
, [

  
    sizePBArtigoPublicado,
    sizePBCapituloLivroPublicado,
    sizePBLivroPublicadoOrganizado,
    sizePBTextoJornalRevista,
    sizePBTrabalhosEvento,
    sizeAPConselhoComissaoConsultoria,
    sizeAPDirecaoAdministracao,
    sizeAPPesquisaDesenvolvimento,
    sizeAPVinculo,
    sizeFATDoutorado,
    sizeFATEspecializacao,
    sizeFATGraduacao,
    sizeFATMestrado,
    sizeOAAperfeicoamentoEspecializacao,
    sizeOADoutorado,
    sizeOAGraduacao,
    sizeOAIniciacaoCientifica,
    sizeOAMestrado,
    sizeOAPosDoutorado,
    sizePartBancaAperfeicoamentoEspecializacao,
    sizePartBancaDoutorado,
    sizePartBancaExameQualificacao,
    sizePartBancaGraduacao,
    sizePartBancaJulgadoraConcursoPublico,
    sizePartBancaJulgadoraOutra,
    sizePartBancaJulgadoraProfessorTitular,
    sizePartBancaMestrado,
    sizePartCongresso,
    sizePartEncontro,
    sizePartOficina,
    sizePartOutras,
    sizePartSeminario,
    sizePartSimposio,
    sizePTPremioTitulo,
    sizeATProjetoPesquisa,
    sizeFCCursoCurtaDuracao
  ]);

const backdropOpen = () => (
  sizePBArtigoPublicado !== '' &&
  sizePBCapituloLivroPublicado !== '' &&
  sizePBLivroPublicadoOrganizado !== '' &&
  sizePBTextoJornalRevista !== '' &&
  sizePBTrabalhosEvento !== '' &&
  sizeAPConselhoComissaoConsultoria !== '' &&
  sizeAPDirecaoAdministracao !== '' &&
  sizeAPPesquisaDesenvolvimento !== '' &&
  sizeAPVinculo !== '' &&
  sizeFATDoutorado !== '' &&
  sizeFATEspecializacao !== '' &&
  sizeFATGraduacao !== '' &&
  sizeFATMestrado !== '' &&
  sizeOAAperfeicoamentoEspecializacao !== '' &&
  sizeOADoutorado !== '' &&
  sizeOAGraduacao !== '' &&
  sizeOAIniciacaoCientifica !== '' &&
  sizeOAMestrado !== '' &&
  sizeOAPosDoutorado !== '' &&
  sizePartBancaAperfeicoamentoEspecializacao !== '' &&
  sizePartBancaDoutorado !== '' &&
  sizePartBancaExameQualificacao !== '' &&
  sizePartBancaGraduacao !== '' &&
  sizePartBancaJulgadoraConcursoPublico !== '' &&
  sizePartBancaJulgadoraOutra !== '' &&
  sizePartBancaJulgadoraProfessorTitular !== '' &&
  sizePartBancaMestrado !== '' &&
  sizePartCongresso !== '' &&
  sizePartEncontro !== '' &&
  sizePartOficina !== '' &&
  sizePartOutras !== '' &&
  sizePartSeminario !== '' &&
  sizePartSimposio !== '' &&
  sizePTPremioTitulo !== '' &&
  sizeATProjetoPesquisa !== '' &&
  sizeFCCursoCurtaDuracao !== '')?false:true;



const [sizeSigaDisciplina, setSizeSigaDisciplina] = useState('');
const [sizeSigaProjeto, setSizeSigaProjeto] = useState('');

const classes = useStyles();
const classes2 = useStyles2();

useEffect(() => {
  getUserId(userName).then(data => setUser(data));
}, []);

const href = (href) => {
  window.location.href = "/ufjfportfolioprofissional/build" + href;
}

useEffect(() => {
  getSizeTable(userName, 'pb_artigo_publicado', (size) => setSizePBArtigoPublicado(size));
  getSizeTable(userName, 'pb_capitulo_livro_publicado_organizado', (size) => setSizePBCapituloLivroPublicado(size));
  getSizeTable(userName, 'pb_livro_publicado_organizado', (size) => setSizePBLivroPublicadoOrganizado(size));
  getSizeTable(userName, 'pb_texto_jornal_revista', (size) => setSizePBTextoJornalRevista(size));
  getSizeTable(userName, 'pb_trabalho_evento', (size) => setSizePBTrabalhosEvento(size));
  getSizeTable(userName, 'ap_conselho_comissao_consultoria', (size) => setSizeAPConselhoComissaoConsultoria(size));
  getSizeTable(userName, 'ap_direcao_administracao', (size) => setSizeAPDirecaoAdministracao(size));
  getSizeTable(userName, 'ap_pesquisa_desenvolvimento', (size) => setSizeAPPesquisaDesenvolvimento(size));
  getSizeTable(userName, 'ap_vinculo', (size) => setSizeAPVinculo(size));
  getSizeTable(userName, 'fat_doutorado', (size) => setSizeFATDoutorado(size));
  getSizeTable(userName, 'fat_especializacao', (size) => setSizeFATEspecializacao(size));
  getSizeTable(userName, 'fat_graduacao', (size) => setSizeFATGraduacao(size));
  getSizeTable(userName, 'fat_mestrado', (size) => setSizeFATMestrado(size));
  getSizeTable(userName, 'oa_aperfeicoamento_especializacao', (size) => setSizeOAAperfeicoamentoEspecializacao(size));
  getSizeTable(userName, 'oa_doutorado', (size) => setSizeOADoutorado(size));
  getSizeTable(userName, 'oa_graduacao', (size) => setSizeOAGraduacao(size));
  getSizeTable(userName, 'oa_iniciacao_cientifica', (size) => setSizeOAIniciacaoCientifica(size));
  getSizeTable(userName, 'oa_mestrado', (size) => setSizeOAMestrado(size));
  getSizeTable(userName, 'oa_posdoutorado', (size) => setSizeOAPosDoutorado(size));
  getSizeTable(userName, 'part_banca_aperfeicoamento_especializacao', (size) => setSizePartBancaAperfeicoamentoEspecializacao(size));
  getSizeTable(userName, 'part_banca_doutorado', (size) => setSizePartBancaDoutorado(size));
  getSizeTable(userName, 'part_banca_exame_qualificacao', (size) => setSizePartBancaExameQualificacao(size));
  getSizeTable(userName, 'part_banca_graduacao', (size) => setSizePartBancaGraduacao(size));
  getSizeTable(userName, 'part_banca_julgadora_concurso_publico', (size) => setSizePartBancaJulgadoraConcursoPublico(size));
  getSizeTable(userName, 'part_banca_julgadora_outra', (size) => setSizePartBancaJulgadoraOutra(size));
  getSizeTable(userName, 'part_banca_julgadora_professor_titular', (size) => setSizePartBancaJulgadoraProfessorTitular(size));
  getSizeTable(userName, 'part_banca_mestrado', (size) => setSizePartBancaMestrado(size));
  getSizeTable(userName, 'part_congresso', (size) => setSizePartCongresso(size));
  getSizeTable(userName, 'part_encontro', (size) => setSizePartEncontro(size));
  getSizeTable(userName, 'part_evento_congresso_outra', (size) => setSizePartOficina(size));
  getSizeTable(userName, 'part_oficina', (size) => setSizePartOutras(size));
  getSizeTable(userName, 'part_seminario', (size) => setSizePartSeminario(size));
  getSizeTable(userName, 'part_simposio', (size) => setSizePartSimposio(size));
  getSizeTable(userName, 'pt_premio_titulo', (size) => setSizePTPremioTitulo(size));
  getSizeTable(userName, 'at_projeto_pesquisa', (size) => setSizeATProjetoPesquisa(size));
  getSizeTable(userName, 'fc_curso_curta_duracao', (size) => setSizeFCCursoCurtaDuracao(size));
  getSizeTable(userName, 'siga_disciplinas', (size) => setSizeSigaDisciplina(size));
  getSizeTable(userName, 'siga_projetos', (size) => setSizeSigaProjeto(size));
}, []);


 const SizeItem = ({ heade, num, url }) => ((num !== '00000000' && num !== '') &&

  <Grid item xs={mobile ? 12 : 4} >
    <div style={{
      width: 150,
      height: 60,
      margin: '0 auto',
      paddingLeft: 20,
      paddingRight: 10,
      borderWidth: 5,
      borderStyle: 'double',
      borderColor: 'black',
      borderRadius: 10,
      backgroundColor: '#aaaaaa',
      cursor: 'pointer',
    }}
      onClick={() => window.location.href = "/ufjfportfolioprofissional/build/portfolio/" + url + "/" + userName}>
      <div style={{
        width: 150,
        height: 60,
        fontSize: 17,
        display: 'table',
        margin: '0 auto',

        textAlign: 'center',
        verticalAlign: 'middle',
        display: "table-cell"
      }}>
        {heade + " "}
      </div>
      <span style={{
        fontSize: 25,
        width: 70,
        height: 60,
        display: 'table',
        textAlign: 'center',
        verticalAlign: 'middle',
        display: "table-cell"
      }}>
        {?num: <CircularProgress color="inherit" />}
      </span>
    </div>
  </Grid>
)

window.addEventListener('resize', function () {

  if (window.innerWidth >= 1000) {
    setMobile(false);
  } else {
    setMobile(true);
  }
});

useEffect(() => {
  if (window.innerWidth >= 1000) {
    setMobile(false);
  } else {
    setMobile(true);
  }

}, [])


const [mobile, setMobile] = useState(false);


const sizeDiv = mobile ? 320 : 1000;
const divMax_ = mobile ? divMaxMobile() : divMax();



//filtro mostrador StyledBreadcrumb

const clickFiltroApagar = () => {

}



const [filterText, setFilterText] = useState('');
const [sliderMin, setSliderMin] = React.useState(1980);
const [sliderMax, setSliderMax] = React.useState(2020);
const [filterAno, setFilterAno] = useState([1980, 2020]);


useEffect(() => {
  setFilterAno([sliderMin, sliderMax]);
}, [sliderMin, sliderMax]);


const Filtros = (TextBusca, anoSelect) => {//formato= (palavra, [2012,2020])
  setFilterText(TextBusca);
  setFilterAno(anoSelect);
  console.log("filtros=", TextBusca, anoSelect)
}


return (
  <Box display="flex" justifyContent="center" bgcolor="background.paper" >
    {/*<Backdrop className={classesbackdrop.backdrop} open={open} >
      <CircularProgress color="inherit" />
</Backdrop>*/}
    <Box className={divMax_.root}>
      <PortfolioBusca getSearch={Filtros} filterAno={filterAno} sliderMin={1989} sliderMax={2020} />
      <Card key={user.name + "aaaa"} style={{ margin: 20 }}>
        <CardHeader
          avatar={<Avatar className={classes.purple}></Avatar>}
          title={user.name}
          subheader={user.email}
        />

        <Box display="flex" justifyContent="center" p={0.5} bgcolor="background.paper">
          <Card className={divMax_.root}>
            <CardHeader
              title={"Portfólio Siga"}

            />
            {

              (
                sizeSigaDisciplina !== '00000000' ||
                sizeSigaProjeto !== '00000000'
              ) && <Card style={{ margin: 20 }} >
                <CardHeader title="Produção Bibliográfica" />
                <div style={{ width: { sizeDiv }, margin: 20 }}>
                  <Grid container spacing={3}  >
                    <SizeItem user={user} heade={'Disciplina'} url={'disciplina'} num={sizeSigaDisciplina} />
                    <SizeItem user={user} heade={'Projeto'} url={'projeto'} num={sizeSigaProjeto} />
                  </Grid>
                </div>
              </Card>}
          </Card>
        </Box>
        <Box display="flex" justifyContent="center" p={0.5} bgcolor="background.paper">
          <Card className={divMax_.root}>
            <CardHeader
              title={"Portfólio Lattes"/*<Button style={{ margin: 15, width: 200 }} color="primary" disableElevation onClick={() => href(`/portfolio/lattes/${user.user_name}`)} >Abrir Todos</Button>*/}
            />
            {(
              sizePBArtigoPublicado !== '00000000' ||
              sizePBCapituloLivroPublicado !== '00000000' ||
              sizePBLivroPublicadoOrganizado !== '00000000' ||
              sizePBTextoJornalRevista !== '00000000' ||
              sizePBTrabalhosEvento !== '00000000'
            ) && <Card style={{ margin: 20 }} >
                <CardHeader title="Produção Bibliográfica"  />
                <div style={{ width: { sizeDiv }, margin: 20 }}>
                  <Grid container spacing={3}  >
                    <SizeItem user={user} heade={'Artigo Publicado'} url={'PBArtigoPublicado'} num={sizePBArtigoPublicado} />
                    <SizeItem user={user} heade={'Capítulo Livro Publicado'} url={'PBCapituloLivroPublicado'} num={sizePBCapituloLivroPublicado} />
                    <SizeItem user={user} heade={'Livro Publicado Organizado'} url={'PBLivroPublicadoOrganizado'} num={sizePBLivroPublicadoOrganizado} />
                    <SizeItem user={user} heade={'Texto Jornal Revista'} url={'PBTextoJornalRevista'} num={sizePBTextoJornalRevista} />
                    <SizeItem user={user} heade={'Trabalho em Evento'} url={'PBTrabalhosEvento'} num={sizePBTrabalhosEvento} />   </Grid>
                </div>
              </Card>}

            {(
              sizeOAIniciacaoCientifica !== '00000000' ||
              sizeOAGraduacao !== '00000000' ||
              sizeOAMestrado !== '00000000' ||
              sizeOADoutorado !== '00000000' ||
              sizeOAPosDoutorado !== '00000000' ||
              sizeOAAperfeicoamentoEspecializacao !== '00000000'
            ) && <Card style={{ margin: 20 }} >
                <CardHeader title="Orientações em Andamento"
                  />
                <div style={{ width: { sizeDiv }, margin: 20 }}>
                  <Grid container spacing={3}  >
                    <SizeItem user={user} heade={'Iniciação Cientifica'} url={'OAIniciacaoCientifica'} num={sizeOAIniciacaoCientifica} />
                    <SizeItem user={user} heade={'Mestrado'} url={'OAMestrado'} num={sizeOAMestrado} />
                    <SizeItem user={user} heade={'Graduação'} url={'OAGraduacao'} num={sizeOAGraduacao} />
                    <SizeItem user={user} heade={'Doutorado'} url={'OADoutorado'} num={sizeOADoutorado} />
                    <SizeItem user={user} heade={'Pós-doutorado'} url={'OAPosDoutorado'} num={sizeOAPosDoutorado} />
                    <SizeItem user={user} heade={'Aperfeiçoamento e Especialização'} url={'OAAperfeicoamentoEspecializacao'} num={sizeOAAperfeicoamentoEspecializacao} />
                  </Grid>
                </div>
              </Card>}

            {(
              sizeFATGraduacao !== '00000000' ||
              sizeFATDoutorado !== '00000000' ||
              sizeFATMestrado !== '00000000' ||
              sizeFATEspecializacao !== '00000000') && <Card style={{ margin: 20 }} >
                <CardHeader title="Formação Acadêmica Titulação"
                  />
                <div style={{ width: { sizeDiv }, margin: 20 }}>
                  <Grid container spacing={3}  >
                    <SizeItem user={user} heade={'Graduação'} url={'FATGraduacao'} num={sizeFATGraduacao} />
                    <SizeItem user={user} heade={'Mestrado'} url={'FATMestrado'} num={sizeFATMestrado} />
                    <SizeItem user={user} heade={'Doutorado'} url={'FATDoutorado'} num={sizeFATDoutorado} />
                    <SizeItem user={user} heade={'Especialização'} url={'FATEspecializacao'} num={sizeFATEspecializacao} />
                  </Grid>
                </div>
              </Card>}

            {(
              sizeAPConselhoComissaoConsultoria !== '00000000' ||
              sizeAPDirecaoAdministracao !== '00000000' ||
              sizeAPPesquisaDesenvolvimento !== '00000000' ||
              sizeATProjetoPesquisa !== '00000000' ||
              sizeAPVinculo !== '00000000') && <Card style={{ margin: 20 }} >
                <CardHeader title="Atuações Profissionais"
                
                />
                <div style={{ width: { sizeDiv }, margin: 20 }}>
                  <Grid container spacing={3}  >
                    <SizeItem user={user} heade={'Conselho Comissão Consultoria'} url={'APConselhoComissaoConsultoria'} num={sizeAPConselhoComissaoConsultoria} />
                    <SizeItem user={user} heade={'Direção Administração'} url={'APDirecaoAdministracao'} num={sizeAPDirecaoAdministracao} />
                    <SizeItem user={user} heade={'Pesquisa e Desenvolvimento'} url={'APPesquisaDesenvolvimento'} num={sizeAPPesquisaDesenvolvimento} />
                    <SizeItem user={user} heade={'Vinculo'} url={'APVinculo'} num={sizeAPVinculo} />
                    <SizeItem user={user} heade={'Projeto Pesquisa'} url={'ATProjetoPesquisa'} num={sizeATProjetoPesquisa} />
                  </Grid>
                </div>
              </Card>}
            {(
              sizePartBancaGraduacao !== '00000000' ||
              sizePartBancaMestrado !== '00000000' ||
              sizePartBancaDoutorado !== '00000000' ||
              sizePartBancaAperfeicoamentoEspecializacao !== '00000000' ||
              sizePartBancaExameQualificacao !== '00000000' ||
              sizePartBancaJulgadoraConcursoPublico !== '00000000' ||
              sizePartBancaJulgadoraProfessorTitular !== '00000000' ||
              sizePartBancaJulgadoraOutra !== '00000000') && <Card style={{ margin: 20 }} >
                <CardHeader title="Participacão em Banca"
                />
                <div style={{ width: { sizeDiv }, margin: 20 }}>
                  <Grid container spacing={3}  >
                    <SizeItem user={user} heade={'Graduação'} url={'PartBancaGraduacao'} num={sizePartBancaGraduacao} />
                    <SizeItem user={user} heade={'Mestrado'} url={'PartBancaMestrado'} num={sizePartBancaMestrado} />
                    <SizeItem user={user} heade={'Doutorado'} url={'PartBancaDoutorado'} num={sizePartBancaDoutorado} />
                    <SizeItem user={user} heade={'Aperfeiçoamento Especialização'} url={'PartBancaAperfeicoamentoEspecializacao'} num={sizePartBancaAperfeicoamentoEspecializacao} />
                    <SizeItem user={user} heade={'Exame Qualificação'} url={'PartBancaExameQualificacao'} num={sizePartBancaExameQualificacao} />
                    <SizeItem user={user} heade={'Julgadora de Professor Titular'} url={'PartBancaJulgadoraProfessorTitular'} num={sizePartBancaJulgadoraProfessorTitular} />
                    <SizeItem user={user} heade={'Julgadora de Concurso Publico'} url={'PartBancaJulgadoraConcursoPublico'} num={sizePartBancaJulgadoraConcursoPublico} />
                    <SizeItem user={user} heade={'Julgadora Outra'} url={'PartBancaJulgadoraOutra'} num={sizePartBancaJulgadoraOutra} />
                  </Grid>
                </div>
              </Card>}
            {(
              sizePartEncontro !== '00000000' ||
              sizePartCongresso !== '00000000' ||
              sizePartOficina !== '00000000' ||
              sizePartOutras !== '00000000' ||
              sizePartSeminario !== '00000000' ||
              sizePartSimposio !== '00000000') && <Card style={{ margin: 20 }} >
                <CardHeader title=" Participacão em Evento"
                 />
                <div style={{ width: { sizeDiv }, margin: 20 }}>
                  <Grid container spacing={3}  >
                    <SizeItem user={user} heade={'Congresso'} url={'PartCongresso'} num={sizePartCongresso} />
                    <SizeItem user={user} heade={'Encontro'} url={'PartEncontro'} num={sizePartEncontro} />
                    <SizeItem user={user} heade={'Oficina'} url={'PartOficina'} num={sizePartOficina} />
                    <SizeItem user={user} heade={'Seminário'} url={'PartSeminario'} num={sizePartSeminario} />
                    <SizeItem user={user} heade={'Simpósio'} url={'PartSimposio'} num={sizePartSimposio} />
                    <SizeItem user={user} heade={'Outras'} url={'PartOutras'} num={sizePartOutras} />
                  </Grid>
                </div>
              </Card>}

            {(sizeFCCursoCurtaDuracao !== '00000000') && <Card style={{ margin: 20 }} >
              <CardHeader title="Formação Complementar" />
              <div style={{ width: { sizeDiv }, margin: 20 }}>
                <Grid container spacing={3}  >
                  <SizeItem user={user} heade={'Curso Curta Duração'} url={'FCCursoCurtaDuracao'} num={sizeFCCursoCurtaDuracao} />  </Grid>
              </div>
            </Card>}

            {(sizePTPremioTitulo !== '00000000') && <Card style={{ margin: 20 }} >
              <CardHeader title="Prêmios Títulos"  />
              <div style={{ width: { sizeDiv }, margin: 20 }}>
                <Grid container spacing={3}  >
                  <SizeItem user={user} heade={'Prêmio Titulo'} url={'PTPremioTitulo'} num={sizePTPremioTitulo} />   </Grid>
              </div>
            </Card>}


          </Card>
        </Box>
      </Card>
    </Box >
  </Box>
);

}

const useStyles = makeStyles((theme) => ({
  root: {

    display: 'flex',
    '& > *': {
      margin: theme.spacing(1),
    },
  },
  orange: {
    color: theme.palette.getContrastText(deepOrange[500]),
    backgroundColor: deepOrange[500],
  },
  purple: {
    color: theme.palette.getContrastText(deepPurple[500]),
    backgroundColor: deepPurple[500],
  },

}));

const useStyles2 = makeStyles((theme) => ({
  root: {
    flexGrow: 1,

  },
  paper: {
    padding: theme.spacing(1),
    textAlign: 'center',
    color: theme.palette.text.secondary,
  },
}));


const divMax = makeStyles((theme) => ({
  root: {
    width: 1000,
    backgroundColor: "#9d98b3",
  },
}));


const divMaxMobile = makeStyles((theme) => ({
  root: {
    width: 350,
  },
}));

const useStylesBackdrop = makeStyles((theme) => ({
  backdrop: {
    zIndex: theme.zIndex.drawer + 1,
    color: '#fff',
  },
}));


/////////////////////////



var date = anoSelect[1];
const dates = [];
while (date >= anoSelect[0]) {
  dates.push(String(date));
  date = date - 1;
}
setFilterAno(dates);
console.log("filtrosano", dates)




import React, { useState, useEffect } from 'react'
import Box from '@material-ui/core/Box';
import LinearProgress from '@material-ui/core/LinearProgress';

import { makeStyles } from '@material-ui/core/styles';
import Paper from '@material-ui/core/Paper';
import Grid from '@material-ui/core/Grid';
import {
  getUserId
} from "../api/serverAPI";

import { deepOrange, deepPurple } from '@material-ui/core/colors';

import { PortfolioBusca } from '../components/PortfolioBusca'
import Card from '@material-ui/core/Card';
import CardHeader from '@material-ui/core/CardHeader';
import Button from '@material-ui/core/Button';
import Avatar from '@material-ui/core/Avatar';
import { getTable } from "../api/serverAPI";

//
import Backdrop from '@material-ui/core/Backdrop';
import CircularProgress from '@material-ui/core/CircularProgress';





//
export const Portfolio = (props) => {


  const userName = props.match.params.user

  const [user, setUser] = useState([]);

  const [sizePBArtigoPublicado, setSizePBArtigoPublicado] = useState('');
  const [sizePBCapituloLivroPublicado, setSizePBCapituloLivroPublicado] = useState('');
  const [sizePBLivroPublicadoOrganizado, setSizePBLivroPublicadoOrganizado] = useState('');
  const [sizePBTextoJornalRevista, setSizePBTextoJornalRevista] = useState('');
  const [sizePBTrabalhosEvento, setSizePBTrabalhosEvento] = useState('');
  const [sizeAPConselhoComissaoConsultoria, setSizeAPConselhoComissaoConsultoria] = useState('');
  const [sizeAPDirecaoAdministracao, setSizeAPDirecaoAdministracao] = useState('');
  const [sizeAPPesquisaDesenvolvimento, setSizeAPPesquisaDesenvolvimento] = useState('');
  const [sizeAPVinculo, setSizeAPVinculo] = useState('');
  const [sizeFATDoutorado, setSizeFATDoutorado] = useState('');
  const [sizeFATEspecializacao, setSizeFATEspecializacao] = useState('');
  const [sizeFATGraduacao, setSizeFATGraduacao] = useState('');
  const [sizeFATMestrado, setSizeFATMestrado] = useState('');
  const [sizeOAAperfeicoamentoEspecializacao, setSizeOAAperfeicoamentoEspecializacao] = useState('');
  const [sizeOADoutorado, setSizeOADoutorado] = useState('');
  const [sizeOAGraduacao, setSizeOAGraduacao] = useState('');
  const [sizeOAIniciacaoCientifica, setSizeOAIniciacaoCientifica] = useState('');
  const [sizeOAMestrado, setSizeOAMestrado] = useState('');
  const [sizeOAPosDoutorado, setSizeOAPosDoutorado] = useState('');
  const [sizePartBancaAperfeicoamentoEspecializacao, setSizePartBancaAperfeicoamentoEspecializacao] = useState('');
  const [sizePartBancaDoutorado, setSizePartBancaDoutorado] = useState('');
  const [sizePartBancaExameQualificacao, setSizePartBancaExameQualificacao] = useState('');
  const [sizePartBancaGraduacao, setSizePartBancaGraduacao] = useState('');
  const [sizePartBancaJulgadoraConcursoPublico, setSizePartBancaJulgadoraConcursoPublico] = useState('');
  const [sizePartBancaJulgadoraOutra, setSizePartBancaJulgadoraOutra] = useState('');
  const [sizePartBancaJulgadoraProfessorTitular, setSizePartBancaJulgadoraProfessorTitular] = useState('');
  const [sizePartBancaMestrado, setSizePartBancaMestrado] = useState('');
  const [sizePartCongresso, setSizePartCongresso] = useState('');
  const [sizePartEncontro, setSizePartEncontro] = useState('');
  const [sizePartOficina, setSizePartOficina] = useState('');
  const [sizePartOutras, setSizePartOutras] = useState('');
  const [sizePartSeminario, setSizePartSeminario] = useState('');
  const [sizePartSimposio, setSizePartSimposio] = useState('');
  const [sizePTPremioTitulo, setSizePTPremioTitulo] = useState('');
  const [sizeATProjetoPesquisa, setSizeATProjetoPesquisa] = useState('');
  const [sizeFCCursoCurtaDuracao, setSizeFCCursoCurtaDuracao] = useState('');

  const [sizeSigaDisciplina, setSizeSigaDisciplina] = useState('');
  const [sizeSigaProjeto, setSizeSigaProjeto] = useState('');


  const [filterText, setFilterText] = useState('');
  const [sliderMin, setSliderMin] = React.useState(1980);
  const [sliderMax, setSliderMax] = React.useState(2020);
  const [filterAno, setFilterAno] = useState(["2020", "2019", "2018", "2017", "2016", "2015", "2014", "2013", "2012", "2011", "2010", "2009", "2008", "2007", "2006", "2005", "2004", "2003", "2002", "2001", "2000", "1999", "1998", "1997", "1996", "1995", "1994", "1993", "1992", "1991"]);


  const [mobile, setMobile] = useState(false);

  const classes = useStyles();
  const classes2 = useStyles2();

  const sizeDiv = mobile ? 320 : 1000;
  const divMax_ = mobile ? divMaxMobile() : divMax();



  //////////////////////////////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////////////////////////////


  useEffect(() => {
    getUserId(userName).then(data => setUser(data));

    getTable(userName, 'pb_artigo_publicado').then((size) => {
      setSizePBArtigoPublicado(size.filter(
        (itemm) => true).filter(
          (itens) => filterAno.indexOf(itens.ano_do_artigo) !== -1).length)
    });
    getTable(userName, 'pb_capitulo_livro_publicado_organizado').then((size) => {
      setSizePBCapituloLivroPublicado(size.filter(
        (itemm) => true).filter(
          (itens) => filterAno.indexOf(itens.ano ) !== -1).length)
    });
    getTable(userName, 'pb_livro_publicado_organizado').then((size) => {
      setSizePBLivroPublicadoOrganizado(size.filter(
        (itemm) => true).filter(
          (itens) => filterAno.indexOf(itens.ano) !== -1).length)
    });
    getTable(userName, 'pb_texto_jornal_revista').then((size) => {
      setSizePBTextoJornalRevista(size.filter(
        (itemm) => true).filter(
          (itens) => filterAno.indexOf(itens.ano_do_texto) !== -1).length)
    });
    getTable(userName, 'pb_trabalho_evento').then((size) => {
      setSizePBTrabalhosEvento(size.filter(
        (itemm) => true).filter(
          (itens) => filterAno.indexOf(itens.ano_do_trabalho) !== -1).length)
    });
    getTable(userName, 'ap_conselho_comissao_consultoria').then((size) => {
      setSizeAPConselhoComissaoConsultoria(size.filter(
        (itemm) => true).filter(
          (itens) => filterAno.indexOf(itens.ano) !== -1).length)
    });
    getTable(userName, 'ap_direcao_administracao').then((size) => {
      setSizeAPDirecaoAdministracao(size.filter(
        (itemm) => true).filter(
          (itens) => filterAno.indexOf(itens.ano) !== -1).length)
    });
    getTable(userName, 'ap_pesquisa_desenvolvimento').then((size) => {
      setSizeAPPesquisaDesenvolvimento(size.filter(
        (itemm) => true).filter(
          (itens) => filterAno.indexOf(itens.ano) !== -1).length)
    });
    getTable(userName, 'ap_vinculo').then((size) => {
      setSizeAPVinculo(size.filter(
        (itemm) => true).filter(
          (itens) => filterAno.indexOf(itens.ano) !== -1).length)
    });
    getTable(userName, 'fat_doutorado').then((size) => {
      setSizeFATDoutorado(size.filter(
        (itemm) => true).filter(
          (itens) => filterAno.indexOf(itens.ano) !== -1).length)
    });
    getTable(userName, 'fat_especializacao').then((size) => {
      setSizeFATEspecializacao(size.filter(
        (itemm) => true).filter(
          (itens) => filterAno.indexOf(itens.ano) !== -1).length)
    });
    getTable(userName, 'fat_graduacao').then((size) => {
      setSizeFATGraduacao(size.filter(
        (itemm) => true).filter(
          (itens) => filterAno.indexOf(itens.ano) !== -1).length)
    });
    getTable(userName, 'fat_mestrado').then((size) => {
      setSizeFATMestrado(size.filter(
        (itemm) => true).filter(
          (itens) => filterAno.indexOf(itens.ano) !== -1).length)
    });
    getTable(userName, 'oa_aperfeicoamento_especializacao').then((size) => {
      setSizeOAAperfeicoamentoEspecializacao(size.filter(
        (itemm) => true).filter(
          (itens) => filterAno.indexOf(itens.ano) !== -1).length)
    });
    getTable(userName, 'oa_doutorado').then((size) => {
      setSizeOADoutorado(size.filter(
        (itemm) => true).filter(
          (itens) => filterAno.indexOf(itens.ano) !== -1).length)
    });
    getTable(userName, 'oa_graduacao').then((size) => {
      setSizeOAGraduacao(size.filter(
        (itemm) => true).filter(
          (itens) => filterAno.indexOf(itens.ano) !== -1).length)
    });
    getTable(userName, 'oa_iniciacao_cientifica').then((size) => {
      setSizeOAIniciacaoCientifica(size.filter(
        (itemm) => true).filter(
          (itens) => filterAno.indexOf(itens.ano) !== -1).length)
    });
    getTable(userName, 'oa_mestrado').then((size) => {
      setSizeOAMestrado(size.filter(
        (itemm) => true).filter(
          (itens) => filterAno.indexOf(itens.ano) !== -1).length)
    });
    getTable(userName, 'oa_posdoutorado').then((size) => {
      setSizeOAPosDoutorado(size.filter(
        (itemm) => true).filter(
          (itens) => filterAno.indexOf(itens.ano) !== -1).length)
    });
    getTable(userName, 'part_banca_aperfeicoamento_especializacao').then((size) => {
      setSizePartBancaAperfeicoamentoEspecializacao(size.filter(
        (itemm) => true).filter(
          (itens) => filterAno.indexOf(itens.ano) !== -1).length)
    });
    getTable(userName, 'part_banca_doutorado').then((size) => {
      setSizePartBancaDoutorado(size.filter(
        (itemm) => true).filter(
          (itens) => filterAno.indexOf(itens.ano) !== -1).length)
    });
    getTable(userName, 'part_banca_exame_qualificacao').then((size) => {
      setSizePartBancaExameQualificacao(size.filter(
        (itemm) => true).filter(
          (itens) => filterAno.indexOf(itens.ano) !== -1).length)
    });
    getTable(userName, 'part_banca_graduacao').then((size) => {
      setSizePartBancaGraduacao(size.filter(
        (itemm) => true).filter(
          (itens) => filterAno.indexOf(itens.ano) !== -1).length)
    });
    getTable(userName, 'part_banca_julgadora_concurso_publico').then((size) => {
      setSizePartBancaJulgadoraConcursoPublico(size.filter(
        (itemm) => true).filter(
          (itens) => filterAno.indexOf(itens.ano) !== -1).length)
    });
    getTable(userName, 'part_banca_julgadora_outra').then((size) => {
      setSizePartBancaJulgadoraOutra(size.filter(
        (itemm) => true).filter(
          (itens) => filterAno.indexOf(itens.ano) !== -1).length)
    });
    getTable(userName, 'part_banca_julgadora_professor_titular').then((size) => {
      setSizePartBancaJulgadoraProfessorTitular(size.filter(
        (itemm) => true).filter(
          (itens) => filterAno.indexOf(itens.ano) !== -1).length)
    });
    getTable(userName, 'part_banca_mestrado').then((size) => {
      setSizePartBancaMestrado(size.filter(
        (itemm) => true).filter(
          (itens) => filterAno.indexOf(itens.ano) !== -1).length)
    });
    getTable(userName, 'part_congresso').then((size) => {
      setSizePartCongresso(size.filter(
        (itemm) => true).filter(
          (itens) => filterAno.indexOf(itens.ano) !== -1).length)
    });
    getTable(userName, 'part_encontro').then((size) => {
      setSizePartEncontro(size.filter(
        (itemm) => true).filter(
          (itens) => filterAno.indexOf(itens.ano) !== -1).length)
    });
    getTable(userName, 'part_evento_congresso_outra').then((size) => {
      setSizePartOficina(size.filter(
        (itemm) => true).filter(
          (itens) => filterAno.indexOf(itens.ano) !== -1).length)
    });
    getTable(userName, 'part_oficina').then((size) => {
      setSizePartOutras(size.filter(
        (itemm) => true).filter(
          (itens) => filterAno.indexOf(itens.ano) !== -1).length)
    });
    getTable(userName, 'part_seminario').then((size) => {
      setSizePartSeminario(size.filter(
        (itemm) => true).filter(
          (itens) => filterAno.indexOf(itens.ano) !== -1).length)
    });
    getTable(userName, 'part_simposio').then((size) => {
      setSizePartSimposio(size.filter(
        (itemm) => true).filter(
          (itens) => filterAno.indexOf(itens.ano) !== -1).length)
    });
    getTable(userName, 'pt_premio_titulo').then((size) => {
      setSizePTPremioTitulo(size.filter(
        (itemm) => true).filter(
          (itens) => filterAno.indexOf(itens.ano) !== -1).length)
    });
    getTable(userName, 'at_projeto_pesquisa').then((size) => {
      setSizeATProjetoPesquisa(size.filter(
        (itemm) => true).filter(
          (itens) => filterAno.indexOf(itens.ano) !== -1).length)
    });
    getTable(userName, 'fc_curso_curta_duracao').then((size) => {
      setSizeFCCursoCurtaDuracao(size.filter(
        (itemm) => true).filter(
          (itens) => filterAno.indexOf(itens.ano) !== -1).length)
    });
    getTable(userName, 'siga_disciplinas').then((size) => {
      setSizeSigaDisciplina(size.filter(
        (itemm) => true).filter(
          (itens) => filterAno.indexOf(itens.ano) !== -1).length)
    });
    getTable(userName, 'siga_projetos').then((size) => {
      setSizeSigaProjeto(size.filter(
        (itemm) => true).filter(
          (itens) => filterAno.indexOf(itens.ano) !== -1).length)
    });
  }, [filterAno, filterText]);

  useEffect(() => {
    if (window.innerWidth >= 1000) {
      setMobile(false);
    } else {
      setMobile(true);
    }

  }, [])

  useEffect(() => {
    setFilterAno([sliderMin, sliderMax]);
  }, [sliderMin, sliderMax]);


  //////////////////////////////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////////////////////////////

  window.addEventListener('resize', function () {

    if (window.innerWidth >= 1000) {
      setMobile(false);
    } else {
      setMobile(true);
    }
  });

  const SizeItem = ({ heade, num, url }) => ((num !== '0' && num !== '') &&

    <Grid item xs={mobile ? 12 : 4} >
      <div style={{
        width: 150,
        height: 70,
        margin: '0 auto',
        paddingLeft: 20,
        paddingRight: 10,
        borderWidth: 5,
        borderStyle: 'double',
        borderColor: 'black',
        borderRadius: 10,
        backgroundColor: '#aaaaaa',
        cursor: 'pointer',
      }}
        onClick={() => window.location.href = "/ufjfportfolioprofissional/build/portfolio/" + url + "/" + userName}>
        <div style={{
          width: 150,
          height: 70,
          fontSize: 17,
          display: 'table',
          margin: '0 auto',

          textAlign: 'center',
          verticalAlign: 'middle',
          display: "table-cell"
        }}>
          {heade + " "}
        </div>
        <span style={{
          fontSize: 25,
          width: 70,
          height: 60,
          display: 'table',
          textAlign: 'center',
          verticalAlign: 'middle',
          display: "table-cell"
        }}>
          {num}
        </span>
      </div>
    </Grid>
  )



  const Filtros = (TextBusca, anoSelect) => {//formato= (palavra, [2012,2020])
    setFilterText(TextBusca);

    var date = anoSelect[1];
    const dates = [];
    while (date >= anoSelect[0]) {
      dates.push(String(date));
      date = date - 1;
    }
    setFilterAno(dates);
    console.log("filtrosano", dates)



    console.log("filtrosXXX=", TextBusca, anoSelect)
  }
  //////////////////////////////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////////////////////////////

  return (
    <Box display="flex" justifyContent="center" bgcolor="background.paper" >
      {/*<Backdrop className={classesbackdrop.backdrop} open={open} >
      <CircularProgress color="inherit" />
</Backdrop>*/}
      <Box className={divMax_.root}>
        <PortfolioBusca getSearch={Filtros} filterAno={filterAno} sliderMin={1989} sliderMax={2020} />
        <Card key={user.name + "aaaa"} style={{ margin: 20 }}>
          <CardHeader
            avatar={<Avatar className={classes.purple}></Avatar>}
            title={user.name}
            subheader={user.email}
          />
          <Box display="flex" justifyContent="center" p={0.5} bgcolor="background.paper">
            <Card className={divMax_.root}>
              <CardHeader
                title={"Portfólio Siga"}

              />
              {

                (
                  sizeSigaDisciplina !== '0' ||
                  sizeSigaProjeto !== '0'
                ) && <Card style={{ margin: 20 }} >
                  <CardHeader title="Produção Bibliográfica" subheader={(
                    sizeSigaDisciplina === '' ||
                    sizeSigaProjeto === '') && <LinearProgress />} />
                  <div style={{ width: { sizeDiv }, margin: 20 }}>
                    <Grid container spacing={3}  >
                      <SizeItem user={user} heade={'Disciplina'} url={'disciplina'} num={sizeSigaDisciplina} />
                      <SizeItem user={user} heade={'Projeto'} url={'projeto'} num={sizeSigaProjeto} />
                    </Grid>
                  </div>
                </Card>}
            </Card>
          </Box>
          <Box display="flex" justifyContent="center" p={0.5} bgcolor="background.paper">
            <Card className={divMax_.root}>
              <CardHeader
                title={"Portfólio Lattes"/*<Button style={{ margin: 15, width: 200 }} color="primary" disableElevation onClick={() => href(`/portfolio/lattes/${user.user_name}`)} >Abrir Todos</Button>*/}
              />
              {(
                sizePBArtigoPublicado !== '0' ||
                sizePBCapituloLivroPublicado !== '0' ||
                sizePBLivroPublicadoOrganizado !== '0' ||
                sizePBTextoJornalRevista !== '0' ||
                sizePBTrabalhosEvento !== '0'
              ) && <Card style={{ margin: 20 }} >
                  <CardHeader title="Produção Bibliográfica" subheader={(
                    sizePBArtigoPublicado === '' ||
                    sizePBCapituloLivroPublicado === '' ||
                    sizePBLivroPublicadoOrganizado === '' ||
                    sizePBTextoJornalRevista === '' ||
                    sizePBTrabalhosEvento === '') && <LinearProgress />} />
                  <div style={{ width: { sizeDiv }, margin: 20 }}>
                    <Grid container spacing={3}  >
                      <SizeItem user={user} heade={'Artigo Publicado'} url={'PBArtigoPublicado'} num={sizePBArtigoPublicado} />
                      <SizeItem user={user} heade={'Capítulo Livro Publicado'} url={'PBCapituloLivroPublicado'} num={sizePBCapituloLivroPublicado} />
                      <SizeItem user={user} heade={'Livro Publicado Organizado'} url={'PBLivroPublicadoOrganizado'} num={sizePBLivroPublicadoOrganizado} />
                      <SizeItem user={user} heade={'Texto Jornal Revista'} url={'PBTextoJornalRevista'} num={sizePBTextoJornalRevista} />
                      <SizeItem user={user} heade={'Trabalho em Evento'} url={'PBTrabalhosEvento'} num={sizePBTrabalhosEvento} />   </Grid>
                  </div>
                </Card>}

              {(
                sizeOAIniciacaoCientifica !== '0' ||
                sizeOAGraduacao !== '0' ||
                sizeOAMestrado !== '0' ||
                sizeOADoutorado !== '0' ||
                sizeOAPosDoutorado !== '0' ||
                sizeOAAperfeicoamentoEspecializacao !== '0'
              ) && <Card style={{ margin: 20 }} >
                  <CardHeader title="Orientações em Andamento"
                    subheader={(
                      sizeOAIniciacaoCientifica === '' ||
                      sizeOAGraduacao === '' ||
                      sizeOAMestrado === '' ||
                      sizeOADoutorado === '' ||
                      sizeOAPosDoutorado === '' ||
                      sizeOAAperfeicoamentoEspecializacao === '') && <LinearProgress />} />
                  <div style={{ width: { sizeDiv }, margin: 20 }}>
                    <Grid container spacing={3}  >
                      <SizeItem user={user} heade={'Iniciação Cientifica'} url={'OAIniciacaoCientifica'} num={sizeOAIniciacaoCientifica} />
                      <SizeItem user={user} heade={'Mestrado'} url={'OAMestrado'} num={sizeOAMestrado} />
                      <SizeItem user={user} heade={'Graduação'} url={'OAGraduacao'} num={sizeOAGraduacao} />
                      <SizeItem user={user} heade={'Doutorado'} url={'OADoutorado'} num={sizeOADoutorado} />
                      <SizeItem user={user} heade={'Pós-doutorado'} url={'OAPosDoutorado'} num={sizeOAPosDoutorado} />
                      <SizeItem user={user} heade={'Aperfeiçoamento e Especialização'} url={'OAAperfeicoamentoEspecializacao'} num={sizeOAAperfeicoamentoEspecializacao} />
                    </Grid>
                  </div>
                </Card>}

              {(
                sizeFATGraduacao !== '0' ||
                sizeFATDoutorado !== '0' ||
                sizeFATMestrado !== '0' ||
                sizeFATEspecializacao !== '0') && <Card style={{ margin: 20 }} >
                  <CardHeader title="Formação Acadêmica Titulação"
                    subheader={(
                      sizeFATGraduacao !== '0' ||
                      sizeFATDoutorado !== '0' ||
                      sizeFATMestrado !== '0' ||
                      sizeFATEspecializacao !== '0') && <LinearProgress />} />
                  <div style={{ width: { sizeDiv }, margin: 20 }}>
                    <Grid container spacing={3}  >
                      <SizeItem user={user} heade={'Graduação'} url={'FATGraduacao'} num={sizeFATGraduacao} />
                      <SizeItem user={user} heade={'Mestrado'} url={'FATMestrado'} num={sizeFATMestrado} />
                      <SizeItem user={user} heade={'Doutorado'} url={'FATDoutorado'} num={sizeFATDoutorado} />
                      <SizeItem user={user} heade={'Especialização'} url={'FATEspecializacao'} num={sizeFATEspecializacao} />
                    </Grid>
                  </div>
                </Card>}

              {(
                sizeAPConselhoComissaoConsultoria !== '0' ||
                sizeAPDirecaoAdministracao !== '0' ||
                sizeAPPesquisaDesenvolvimento !== '0' ||
                sizeATProjetoPesquisa !== '0' ||
                sizeAPVinculo !== '0') && <Card style={{ margin: 20 }} >
                  <CardHeader title="Atuações Profissionais"
                    subheader={(
                      sizeAPConselhoComissaoConsultoria === '' ||
                      sizeAPDirecaoAdministracao === '' ||
                      sizeAPPesquisaDesenvolvimento === '' ||
                      sizeATProjetoPesquisa === '' ||
                      sizeAPVinculo === '') && <LinearProgress />}
                  />
                  <div style={{ width: { sizeDiv }, margin: 20 }}>
                    <Grid container spacing={3}  >
                      <SizeItem user={user} heade={'Conselho Comissão Consultoria'} url={'APConselhoComissaoConsultoria'} num={sizeAPConselhoComissaoConsultoria} />
                      <SizeItem user={user} heade={'Direção Administração'} url={'APDirecaoAdministracao'} num={sizeAPDirecaoAdministracao} />
                      <SizeItem user={user} heade={'Pesquisa e Desenvolvimento'} url={'APPesquisaDesenvolvimento'} num={sizeAPPesquisaDesenvolvimento} />
                      <SizeItem user={user} heade={'Vinculo'} url={'APVinculo'} num={sizeAPVinculo} />
                      <SizeItem user={user} heade={'Projeto Pesquisa'} url={'ATProjetoPesquisa'} num={sizeATProjetoPesquisa} />
                    </Grid>
                  </div>
                </Card>}
              {(
                sizePartBancaGraduacao !== '0' ||
                sizePartBancaMestrado !== '0' ||
                sizePartBancaDoutorado !== '0' ||
                sizePartBancaAperfeicoamentoEspecializacao !== '0' ||
                sizePartBancaExameQualificacao !== '0' ||
                sizePartBancaJulgadoraConcursoPublico !== '0' ||
                sizePartBancaJulgadoraProfessorTitular !== '0' ||
                sizePartBancaJulgadoraOutra !== '0') && <Card style={{ margin: 20 }} >
                  <CardHeader title="Participacão em Banca"
                    subheader={(
                      sizePartBancaGraduacao === '' ||
                      sizePartBancaMestrado === '' ||
                      sizePartBancaDoutorado === '' ||
                      sizePartBancaAperfeicoamentoEspecializacao === '' ||
                      sizePartBancaExameQualificacao === '' ||
                      sizePartBancaJulgadoraConcursoPublico === '' ||
                      sizePartBancaJulgadoraProfessorTitular === '' ||
                      sizePartBancaJulgadoraOutra === '') && <LinearProgress />} />
                  <div style={{ width: { sizeDiv }, margin: 20 }}>
                    <Grid container spacing={3}  >
                      <SizeItem user={user} heade={'Graduação'} url={'PartBancaGraduacao'} num={sizePartBancaGraduacao} />
                      <SizeItem user={user} heade={'Mestrado'} url={'PartBancaMestrado'} num={sizePartBancaMestrado} />
                      <SizeItem user={user} heade={'Doutorado'} url={'PartBancaDoutorado'} num={sizePartBancaDoutorado} />
                      <SizeItem user={user} heade={'Aperfeiçoamento Especialização'} url={'PartBancaAperfeicoamentoEspecializacao'} num={sizePartBancaAperfeicoamentoEspecializacao} />
                      <SizeItem user={user} heade={'Exame Qualificação'} url={'PartBancaExameQualificacao'} num={sizePartBancaExameQualificacao} />
                      <SizeItem user={user} heade={'Julgadora de Professor Titular'} url={'PartBancaJulgadoraProfessorTitular'} num={sizePartBancaJulgadoraProfessorTitular} />
                      <SizeItem user={user} heade={'Julgadora de Concurso Publico'} url={'PartBancaJulgadoraConcursoPublico'} num={sizePartBancaJulgadoraConcursoPublico} />
                      <SizeItem user={user} heade={'Julgadora Outra'} url={'PartBancaJulgadoraOutra'} num={sizePartBancaJulgadoraOutra} />
                    </Grid>
                  </div>
                </Card>}
              {(
                sizePartEncontro !== '0' ||
                sizePartCongresso !== '0' ||
                sizePartOficina !== '0' ||
                sizePartOutras !== '0' ||
                sizePartSeminario !== '0' ||
                sizePartSimposio !== '0') && <Card style={{ margin: 20 }} >
                  <CardHeader title=" Participacão em Evento"
                    subheader={(
                      sizePartEncontro === '' ||
                      sizePartCongresso === '' ||
                      sizePartOficina === '' ||
                      sizePartOutras === '' ||
                      sizePartSeminario === '' ||
                      sizePartSimposio === '') && <LinearProgress />} />
                  <div style={{ width: { sizeDiv }, margin: 20 }}>
                    <Grid container spacing={3}  >
                      <SizeItem user={user} heade={'Congresso'} url={'PartCongresso'} num={sizePartCongresso} />
                      <SizeItem user={user} heade={'Encontro'} url={'PartEncontro'} num={sizePartEncontro} />
                      <SizeItem user={user} heade={'Oficina'} url={'PartOficina'} num={sizePartOficina} />
                      <SizeItem user={user} heade={'Seminário'} url={'PartSeminario'} num={sizePartSeminario} />
                      <SizeItem user={user} heade={'Simpósio'} url={'PartSimposio'} num={sizePartSimposio} />
                      <SizeItem user={user} heade={'Outras'} url={'PartOutras'} num={sizePartOutras} />
                    </Grid>
                  </div>
                </Card>}

              {(sizeFCCursoCurtaDuracao !== '0') && <Card style={{ margin: 20 }} >
                <CardHeader title="Formação Complementar" subheader={(sizeFCCursoCurtaDuracao === '') && <LinearProgress />} />
                <div style={{ width: { sizeDiv }, margin: 20 }}>
                  <Grid container spacing={3}  >
                    <SizeItem user={user} heade={'Curso Curta Duração'} url={'FCCursoCurtaDuracao'} num={sizeFCCursoCurtaDuracao} />  </Grid>
                </div>
              </Card>}

              {(sizePTPremioTitulo !== '0') && <Card style={{ margin: 20 }} >
                <CardHeader title="Prêmios Títulos" subheader={(sizePTPremioTitulo === '') && <LinearProgress />} />
                <div style={{ width: { sizeDiv }, margin: 20 }}>
                  <Grid container spacing={3}  >
                    <SizeItem user={user} heade={'Prêmio Titulo'} url={'PTPremioTitulo'} num={sizePTPremioTitulo} />   </Grid>
                </div>
              </Card>}


            </Card>
          </Box>
        </Card>
      </Box >
    </Box>
  );

}


//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
const useStyles = makeStyles((theme) => ({
  root: {

    display: 'flex',
    '& > *': {
      margin: theme.spacing(1),
    },
  },
  orange: {
    color: theme.palette.getContrastText(deepOrange[500]),
    backgroundColor: deepOrange[500],
  },
  purple: {
    color: theme.palette.getContrastText(deepPurple[500]),
    backgroundColor: deepPurple[500],
  },

}));

const useStyles2 = makeStyles((theme) => ({
  root: {
    flexGrow: 1,

  },
  paper: {
    padding: theme.spacing(1),
    textAlign: 'center',
    color: theme.palette.text.secondary,
  },
}));


const divMax = makeStyles((theme) => ({
  root: {
    width: 1000,
    backgroundColor: "#9d98b3",
  },
}));


const divMaxMobile = makeStyles((theme) => ({
  root: {
    width: 350,
  },
}));

const useStylesBackdrop = makeStyles((theme) => ({
  backdrop: {
    zIndex: theme.zIndex.drawer + 1,
    color: '#fff',
  },
}));
